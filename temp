void matrix_ope(){

    ans_matrix.resize(n);
    for(int i=0; i<n; i++) ans_matrix[i].resize(n, 0);

    cout<<n<<" n m "<<m<<" \n";

    auto start = std::chrono::high_resolution_clock::now();

    vector<int> temp(m*m);
    bool flag;
    int i, j, k, t, q, w, c=1, numt=4;

    // #pragma omp parallel for private(i,j,k,t,q,w,temp,flag,c) shared(m_input, ans_matrix, in_matrix, compress_ans_matrix)   // a lot variation in time avg~23000 ms 
    // #pragma omp parallel for schedule(static) num_threads(4) private(i,j,k,t,q,w,temp,flag,c)          //gives time around 10000 ms
    #pragma omp parallel num_threads(numt) private(i,j,k,t,q,w,temp,flag,c)
    {
        int tid = omp_get_thread_num();
        for(i=tid; i<n; i+=numt){
        // for(i=0; i<n; i++){
            for(j=max(i-m, 0); j<n; j++){
                t = 0;
                for(k=0; k<n; k++){
                    // // this when mapping of blocks with i>j is not done
                    // if(m_input[{min(i/m, k/m), max(i/m, k/m)}]==0 or m_input[{min(k/m, j/m), max(k/m, j/m)}]==0) continue;
                    // // when mapping of blocks with i>j is done
                    if(m_input[{i/m, k/m}]==0 or m_input[{k/m, j/m}]==0) { k+=m-1; continue;}
                    if(i/m <= k/m) q = in_matrix[m_input[{i/m, k/m}]-1][m*(i%m)+k%m];
                    else q = in_matrix[m_input[{k/m, i/m}]-1][m*(k%m)+i%m];
                    if(k/m <= j/m) w = in_matrix[m_input[{k/m, j/m}]-1][m*(k%m)+j%m];
                    else w = in_matrix[m_input[{j/m, k/m}]-1][m*(j%m)+k%m];
                    t = Outer(t, Inner(q, w));
                    t = (t > MAX_VAL - 1) ? MAX_VAL - 1 : t;
                }
                ans_matrix[i][j] = t;
            }
        }
    }

    // auto start = std::chrono::high_resolution_clock::now();

    //     int i, j, k, l, t, q, w, c=1, fi, si, fj, sj, xi, yi, xj, yj;
    //     bool flag; vector<int> temp(m*m);

    // // #pragma omp parallel for private(i,j,k,l,t,q,w,temp,flag,c,fi,si,fj,sj,xi,yi,xj,yj) shared(rm_input, ans_matrix, in_matrix, compress_ans_matrix)   // ~ 24014 microseconds
    // // #pragma omp parallel for schedule(static) num_threads(4) private(i,j,k,l,t,q,w,temp,flag,c,fi,si,fj,sj,xi,yi,xj,yj)    // ~13127 microseconds
    // // #pragma omp parallel num_threads(4) private(i,j,k,l,t,q,w,temp,flag,c,fi,si,fj,sj,xi,yi,xj,yj) shared(rm_input, ans_matrix, in_matrix, compress_ans_matrix)
    // // {
    // //     int tid = omp_get_thread_num();
    // //     for(i=tid; i<=k_input; i+=tid){
    //     for(i=1; i<=k_input; i++){
    //         // cout<<tid<<" H1\n";
    //         for(j=1; j<=k_input; j++){
    //             // cout<<tid<<" H2\n";
    //             fi = rm_input[i].first, si = rm_input[i].second;
    //             fj = rm_input[j].first, sj = rm_input[j].second;
    //             for(k=0; k<m*m; k++){
    //                 // cout<<tid<<" H3\n";
    //                 xi = fi*m + k/m, yi = si*m + k%m;
    //                 for(l=0; l<m*m; l++){  //directly calculating compress ans matrix is also possible
    //                 // try to calculate ans matrix for only upper triangle elements
    //                     // cout<<tid<<" H4\n";
    //                     xj = fj*m + l/m, yj = sj*m + l%m;
    //                     // cout<<tid<<" H5\n";
    //                     // t = Inner(in_matrix[i-1][k], in_matrix[j-1][l]);
    //                     // cout<<tid<<" H6\n";
    //                     // #pragma omp single
    //                     // {
    //                         int xx=1;

    //                         if(xj==yi){ xx*=2; ans_matrix[xi][yj] = Outer(ans_matrix[xi][yj], Inner(in_matrix[i-1][k], in_matrix[j-1][l]));}
    //                         if(fi!=si and xi==xj){ xx*=3; ans_matrix[yi][yj] = Outer(ans_matrix[yi][yj], Inner(in_matrix[i-1][k], in_matrix[j-1][l]));}
    //                         if(fj!=sj and yj==yi){ xx*=5; ans_matrix[xi][xj] = Outer(ans_matrix[xi][xj], Inner(in_matrix[i-1][k], in_matrix[j-1][l]));}
    //                         if(fi!=si and fj!=sj and xi==yj){ xx*=7; ans_matrix[yi][xj] = Outer(ans_matrix[yi][xj], Inner(in_matrix[i-1][k], in_matrix[j-1][l]));}
    //                         if(xx>1) cout<<xx<<" x "<<xi<<" "<<yi<<" "<<xj<<" "<<yj<<endl;
    //                     // }
    //                 }
    //             }
    //         // }
    //     }
    // }



// int numt = 4;
//     // #pragma omp parallel for private(i,j,k,l,t,q,w,temp,flag,c,fi,si,fj,sj,xi,yi,xj,yj) shared(rm_input, ans_matrix, in_matrix, compress_ans_matrix)   // ~ 24014 microseconds
//     // #pragma omp parallel for schedule(static) num_threads(4) private(i,j,k,l,t,q,w,temp,flag,c,fi,si,fj,sj,xi,yi,xj,yj)    // ~13127 microseconds
//     #pragma omp parallel num_threads(numt) private(i,j,k,l,t,q,w,temp,flag,c,fi,si,fj,sj,xi,yi,xj,yj) shared(rm_input, ans_matrix, in_matrix, compress_ans_matrix)
//     {
//         int tid = omp_get_thread_num();
//         for(i=tid+1; i<=k_input; i+=numt){
//         // for(i=1; i<=k_input; i++){
//             fi = rm_input[i].first, si = rm_input[i].second;
//             for(j=1; j<=k_input; j++){
//                 fj = rm_input[j].first, sj = rm_input[j].second;
//                 for(k=0; k<m*m; k++){
//                     xi = fi*m + k/m, yi = si*m + k%m;
//                     for(l=0; l<m*m; l++){  //directly calculating compress ans matrix is also possible
//                     // try to calculate ans matrix for only upper triangle elements
//                         xj = fj*m + l/m, yj = sj*m + l%m;
//                         // t = Inner(in_matrix[i-1][k], in_matrix[j-1][l]);
//                         // #pragma omp critical
//                         // {
//                             // cout<<"h ";
//                             if(xi==xj and yi==yj){
//                                 ans_matrix[yi][yj] = Outer(ans_matrix[yi][yj], Inner(in_matrix[i-1][k], in_matrix[j-1][l]));
//                                 ans_matrix[xi][xj] = Outer(ans_matrix[xi][xj], Inner(in_matrix[i-1][k], in_matrix[j-1][l]));
//                             }
//                             else if(xj==yi)
//                                 ans_matrix[xi][yj] = Outer(ans_matrix[xi][yj], Inner(in_matrix[i-1][k], in_matrix[j-1][l]));
//                             else if(xi==xj)
//                                 ans_matrix[yi][yj] = Outer(ans_matrix[yi][yj], Inner(in_matrix[i-1][k], in_matrix[j-1][l]));
//                             else if(yi==yj)
//                                 ans_matrix[xi][xj] = Outer(ans_matrix[xi][xj], Inner(in_matrix[i-1][k], in_matrix[j-1][l]));
//                             else if(xi==yj)
//                                 ans_matrix[yi][xj] = Outer(ans_matrix[yi][xj], Inner(in_matrix[i-1][k], in_matrix[j-1][l]));
//                         // }
//                     }
//                 }
//             }
//         }
//     }



        for(i=0; i<n/m; i++){
            for(j=i; j<n/m; j++){
                flag=false;
                for(k=0; k<m*m; k++){
                    if(ans_matrix[i*m+k/m][j*m+k%m]>0)  flag=true;
                    temp[k] = ans_matrix[i*m+k/m][j*m+k%m];
                }
                if(flag){
                    m_ans[{i, j}] = c++;
                    compress_ans_matrix.push_back(temp);
                }
            }
        }
    cout<<compress_ans_matrix.size()<<" my k\n";






    // int g = (n/m)*(n/m+1)/2;
    // compress_ans_matrix.resize(g);
    // for(int i=0; i<g; i++) compress_ans_matrix[i].resize(m*m, 0);
    // for(int i=0, c=1; i<n/m; i++){
    //     for(int j=i; j<n/m; j++){
    //         m_ans[{i, j}] = c++;
    //     }
    // }

    // auto start = std::chrono::high_resolution_clock::now();

    // vector<int> temp(m*m);
    // bool flag;
    // int i, j, k, t, q, w, c=1;

    // // #pragma omp parallel for private(i,j,k,t,q,w,temp,flag,c) shared(m_input, ans_matrix, in_matrix, compress_ans_matrix)   // a lot variation in time avg~23000 ms 
    // #pragma omp parallel for schedule(static) num_threads(4) private(i,j,k,t,q,w,temp,flag,c)          //gives time around 10000 ms
    //     for(i=0; i<n; i++){
    //         for(j=max(i-m, 0); j<n; j++){
    //             t = 0;
    //             for(k=0; k<n; k++){
    //                 // // this when mapping of blocks with i>j is not done
    //                 // if(m_input[{min(i/m, k/m), max(i/m, k/m)}]==0 or m_input[{min(k/m, j/m), max(k/m, j/m)}]==0) continue;
    //                 // // when mapping of blocks with i>j is done
    //                 if(m_input[{i/m, k/m}]==0 or m_input[{k/m, j/m}]==0) { k+=m-1; continue;}
    //                 if(i/m <= k/m) q = in_matrix[m_input[{i/m, k/m}]-1][m*(i%m)+k%m];
    //                 else q = in_matrix[m_input[{k/m, i/m}]-1][m*(k%m)+i%m];
    //                 if(k/m <= j/m) w = in_matrix[m_input[{k/m, j/m}]-1][m*(k%m)+j%m];
    //                 else w = in_matrix[m_input[{j/m, k/m}]-1][m*(j%m)+k%m];
    //                 t = Outer(t, Inner(q, w));
    //                 t = (t > MAX_VAL - 1) ? MAX_VAL - 1 : t;
    //             }
    //             // ans_matrix[i][j] = t;
    //             #pragma omp critical
    //             {
    //                 if(i/m <= j/m) {
    //                     if(m_ans[{i/m, j/m}]==0) m_ans[{i/m, j/m}] = c++;
    //                     compress_ans_matrix[m_ans[{i/m, j/m}]-1][m*(i%m)+(j%m)] = t;
    //                 }
    //             }
    //         }
    //     }

    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();
    std::cout << "Time taken: " << duration << " microseconds" << std::endl;
}


