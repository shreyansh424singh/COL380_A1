######################################## FIRST ############################################
1st: Normal Multiplication O(n^3).
	Time: 307108 microseconds
	
	************************************code*********************************
	for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            int temp = 0;
            for(int k=0; k<n; k++){
                if(m_input[{min(i/m, k/m), max(i/m, k/m)}]==0 or m_input[{min(k/m, j/m), max(k/m, j/m)}]==0) continue;
                int q, w;
                if(i/m <= k/m) q = in_matrix[m_input[{i/m, k/m}]-1][m*(i%m)+k%m];
                else q = in_matrix[m_input[{k/m, i/m}]-1][m*(k%m)+i%m];
                if(k/m <= j/m) w = in_matrix[m_input[{k/m, j/m}]-1][m*(k%m)+j%m];
                else w = in_matrix[m_input[{j/m, k/m}]-1][m*(j%m)+k%m];
                temp = Outer(temp, Inner(q, w));
                temp = min(temp, MAX_VAL-1);
            }
            ans_matrix[i][j] = temp;
        }
    }

    for(int i=0, c=1; i<n/m; i++){
        for(int j=i; j<n/m; j++){
            vector<int> temp(m*m); bool flag=false;
            for(int k=0; k<m*m; k++){
                if(ans_matrix[i*m+k/m][j*m+k%m]>0) flag=true;
                temp[k] = ans_matrix[i*m+k/m][j*m+k%m];
            }
            if(flag){
                m_ans[{i, j}] = c++;
                compress_ans_matrix.push_back(temp);
            }
        }
    }
    	************************************code*********************************
    	
Makefile: 
	g++ -c main.cpp -o main.o
	g++ main.o library1.so -o a.out -Wl,-rpath=.
	./a.out 
    	
    	
######################################## SECOND ############################################    	

Just added -O3 flag.
Time: 31415 microseconds
Speedup: .... times

MAkefile:
	g++ -O3 -c main.cpp -o main.o
	g++ main.o library1.so -o a.out -Wl,-rpath=.
	./a.out 
	
	
######################################## THIRD ############################################    		

#pragma omp parallel for schedule(dynamic)
This is giving frequent stack overflow.













